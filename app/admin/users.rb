ActiveAdmin.register User do
  # these bulk CRUDy actions are deprecated by our custom actions
  actions :all, :except => [:destroy,:edit,:new]

  # buttons for taking actions on users...

  action_item :only => :show do
    link_to "Change Roles", roles_admin_user_path(user)
  end

  # actions available for users...

  # index of all users in the system
  index do
    column "Email" do |user|
      link_to user.email, admin_user_path(user)
    end
    column :username
    column :confirmed_at
  end

  # provides the page for changing a user's roles
  # NOTE: obviously dangerous
  member_action :roles, :method => :get, :as => :block do
    @available_roles = ROLES
  end

  # provides handling for submission of changed user roles
  # NOTE: obviously dangerous
  member_action :roles_do, :method => :post, :as => :block do
    # because this assignment works against a mask of valid values it should never fail
    @user.roles = params[:user][:roles]
    @user.save

    flash[:info] = "We have updated the user's roles."
    return redirect_to admin_user_path(@certifyee)
  end


  # handles the displaying of users
  # NOTE: there are several levels of user involvement that we have to take into account:
  #       1. user is registered but hasn't confirmed their email
  #       2. user is confirmed but hasn't provided meta data about their eligibility
  #       3. user has provided meta data for certification but hasn't voted
  #       4. user has voted but hasn't been certified
  #       5. voter has been certified
  show :as => :block, :title => :email do |user|
    @user = user

    div :for => user do
      table :class => "index_table" do
        tr do
          th do
            "Email"
          end
          th do
            "Username"
          end
          th do
            "Roles"
          end
          th do
            "Registered At"
          end
        end
        tr do
          td do
            simple_format user.email
          end
          td do
            simple_format user.username
          end
          td do
            simple_format user.roles.to_sentence
          end
          td do
            simple_format user.confirmed_at ? user.confirmed_at.strftime("%B %d, %Y @ %I:%M%p") : ""
          end
        end
      end

      h3 "Registrations"
      table :class => "index_table" do
        tr do
          th do
            "ID"
          end
          th do
            "Full Name"
          end
          th do
            "Street Address"
          end
          th do
            "SSN"
          end
          th do
            "Country Code"
          end
          th do
            "State"
          end
          th do
            "Postal Code"
          end
          th do
            "Certified At"
          end
          th do
            "Certification"
          end
          th do
            "Certifier"
          end
        end
        user.registrations.each do |registration|
          tr do
            td do
              link_to registration.id, admin_registration_path(registration)
            end
            td do
              registration.fullname
            end
            td do
              registration.street_address
            end
            td do
              registration.ssn
            end
            td do
              registration.country_code
            end
            td do
              (state = registration.state) ? state.name : ""
            end
            td do
              registration.postal_code
            end
            td do
              simple_format registration.certified_at ? registration.certified_at.strftime("%B %d, %Y @ %I:%M%p") : ""
            end
            td do
              simple_format registration.certification.to_s
            end
            td do
              simple_format registration.certifier ? registration.certifier.username : ""
            end
          end
        end
      end
    end

    revision_table(user)
  end

  # the following code basically operates on the underlying standard Rails controller generated by the ActiveAdmin framework
  controller do
    before_filter :get_user,            :only => [:roles, :roles_do]
    before_filter :can_manage,          :only => [:roles, :roles_do]

    protected

    ## user management filters

    def get_user
      unless @user = User.find(params[:id])
        flash[:error] = "Unable to find that user."
        return redirect_to admin_users_path
      end
    end

    def can_manage
      authorize! :update, @user
    end
  end
end
